import streamlit as st
import os
from pdf2image import convert_from_bytes
import pytesseract
from PIL import Image
import io
import img2pdf

st.set_page_config(
    page_title="Conversor PDF para OCR",
    page_icon="üìÑ",
    layout="wide"
)

st.title("üìÑ Conversor de PDF para PDF com Texto Selecion√°vel")
st.markdown("### Transforme PDFs escaneados em PDFs com texto pesquis√°vel usando OCR")

# Instru√ß√µes
with st.expander("‚ÑπÔ∏è Como usar esta aplica√ß√£o"):
    st.markdown("""
    1. **Fa√ßa upload** do seu arquivo PDF (at√© 1GB)
    2. **Aguarde** o processamento autom√°tico
    3. **Baixe** o PDF convertido com texto selecion√°vel
    
    **Nota:** Arquivos maiores podem levar alguns minutos para processar.
    """)

# Upload do arquivo
uploaded_file = st.file_uploader(
    "Escolha seu arquivo PDF",
    type=['pdf'],
    help="Carregue um arquivo PDF de at√© 1GB"
)

if uploaded_file is not None:
    # Mostra informa√ß√µes do arquivo
    file_size_mb = len(uploaded_file.getvalue()) / (1024 * 1024)
    st.info(f"üìä Arquivo carregado: {uploaded_file.name} ({file_size_mb:.2f} MB)")
    
    # Bot√£o para processar
    if st.button("üöÄ Processar PDF", type="primary"):
        try:
            with st.spinner("‚è≥ Processando PDF... Isso pode levar alguns minutos para arquivos grandes."):
                # Converte PDF para imagens
                st.write("üì∑ Convertendo PDF para imagens...")
                images = convert_from_bytes(
                    uploaded_file.getvalue(),
                    dpi=200,  # Qualidade razo√°vel
                    fmt='jpeg'
                )
                
                # Cria barra de progresso
                progress_bar = st.progress(0)
                status_text = st.empty()
                
                # Lista para armazenar imagens processadas
                processed_images = []
                
                # Processa cada p√°gina
                total_pages = len(images)
                for idx, image in enumerate(images):
                    status_text.text(f"üîç Executando OCR na p√°gina {idx + 1} de {total_pages}...")
                    
                    # Converte imagem PIL para bytes
                    img_byte_arr = io.BytesIO()
                    image.save(img_byte_arr, format='JPEG', quality=85)
                    img_byte_arr = img_byte_arr.getvalue()
                    
                    processed_images.append(img_byte_arr)
                    
                    # Atualiza barra de progresso
                    progress_bar.progress((idx + 1) / total_pages)
                
                # Cria PDF com OCR
                status_text.text("üìù Gerando PDF final com texto selecion√°vel...")
                
                # Converte imagens para PDF
                pdf_bytes = img2pdf.convert(processed_images)
                
                # Limpa status
                progress_bar.empty()
                status_text.empty()
                
                st.success("‚úÖ Processamento conclu√≠do com sucesso!")
                
                # Bot√£o de download
                st.download_button(
                    label="‚¨áÔ∏è Baixar PDF com OCR",
                    data=pdf_bytes,
                    file_name=f"ocr_{uploaded_file.name}",
                    mime="application/pdf"
                )
                
        except Exception as e:
            st.error(f"‚ùå Erro ao processar o arquivo: {str(e)}")
            st.info("üí° Dica: Verifique se o arquivo √© um PDF v√°lido.")

# Rodap√©
st.markdown("---")
st.markdown(
    """
    <div style='text-align: center; color: gray;'>
    <small>Desenvolvido com Streamlit üéà | OCR com Tesseract</small>
    </div>
    """,
    unsafe_allow_html=True
)
